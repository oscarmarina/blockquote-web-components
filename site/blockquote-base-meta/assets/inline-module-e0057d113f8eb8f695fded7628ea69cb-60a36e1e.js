window[Symbol.for("BLOCKQUOTE")]=window[Symbol.for("BLOCKQUOTE")]||Object.create(null);window[Symbol.for("BLOCKQUOTE")][Symbol.for("blockquoteBaseMeta")]=window[Symbol.for("BLOCKQUOTE")][Symbol.for("blockquoteBaseMeta")]||Object.create(null);const y=window[Symbol.for("BLOCKQUOTE")][Symbol.for("blockquoteBaseMeta")];y[Symbol.for("types")]=y[Symbol.for("types")]||new Map;y[Symbol.for("uuid")]=y[Symbol.for("uuid")]||Math.random().toString(36).substr(2,10);class n{constructor(e){this.type=e&&e.type||"default",this.key=e&&e.key,e&&"value"in e&&(this.value=e.value)}static get types(){return y[Symbol.for("types")]}static get uuid(){return y[Symbol.for("uuid")]}get value(){const{type:e}=this,t=this.__key||this.key;if(this.__key=void 0,e&&t)return n.types.get(e)&&n.types.get(e).get(t)}set value(e){const{type:t}=this,{key:s}=this;let o;t&&s&&(n.types.get(t)===void 0&&n.types.set(t,new Map),o=n.types.get(t),e===null?o.delete(s):o.set(s,e))}get list(){const{type:e}=this,t=n.types.get(e);return t?Array.from(t.values()):[]}get mapList(){const{type:e}=this,t=n.types.get(e);return t||new Map}get objectList(){return Object.fromEntries(this.mapList)}byKey(e){return this.__key=e,this.value}}const i=new n({key:"basic",value:"foo/bar"}),r=new n({type:"article",key:"indefinite",value:"a/an"});new n({type:"article",key:"definite",value:"the"});new n({type:"article",key:"negative",value:"no"});const u=document.querySelector(".meta-key .inner-meta-key"),a=document.querySelector(".meta-key .inner-meta-value");u.textContent=`${i.key}`;a.textContent=`${i.byKey("basic")}`;const l=document.querySelector(".meta-query .inner-meta-key"),m=document.querySelector(".meta-query .inner-meta-value");l.textContent=`${r.type}`;m.textContent=`${JSON.stringify(r.list)}`;const c=document.querySelector(".meta-query .inner-meta-keys"),f=document.querySelector(".meta-query .inner-meta-values");c.textContent=`${r.type}`;f.textContent=`${JSON.stringify(r.objectList)}`;console.info("objectList: ",r.objectList);console.info("mapList: ",r.mapList);
