{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/BlockquoteControllerXstate.js",
      "declarations": [
        {
          "kind": "class",
          "description": "# BlockquoteControllerXstate\n\n![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n### Connect XState machines with Lit's reactive property\nThe `BlockquoteControllerXstate` is a Lit Reactive Controller specifically designed for straightforward integration with XState.\nThis controller allows you to subscribe to an XState actor, updating a specified reactive property whenever the state machine transitions.\n\n- [xstate v5](https://stately.ai/docs/installation)\n- [xstate v5 - examples](https://stately.ai/docs/examples)\n- [Original idea](https://codesandbox.io/s/z3o0s?file=/src/toggleMachine.ts)\n\n<hr>\n\n### Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/blockquote-web-components/tree/main/packages/controllers/blockquote-controller-xstate)\n\n[![Open in Stately.ai](https://img.shields.io/badge/Open%20in%20Stately.ai-black.svg)](https://stately.ai/registry/editor/154a7a42-9338-4cc0-8c0c-131c859d8349)\n\n### Usage\n\n***counterMachine.js***\n\n```javascript\nimport { createMachine, assign } from 'xstate';\n\nconst states = {\n  enabled: 'enabled',\n  disabled: 'disabled',\n};\n\nconst increment = {\n  counter: ({ context }) => context.counter + 1,\n  event: ({ event }) => event,\n};\nconst decrement = {\n  counter: ({ context }) => context.counter - 1,\n  event: ({ event }) => event,\n};\n\nconst isNotMax = ({ context }) => context.counter < 10;\nconst isNotMin = ({ context }) => context.counter > 0;\n\nexport const counterMachine = createMachine(\n  {\n    id: 'counter',\n    context: { counter: 0, event: undefined },\n    initial: 'enabled',\n    states: {\n      enabled: {\n        on: {\n          INC: {\n            actions: {\n              type: 'increment',\n            },\n            guard: {\n              type: 'isNotMax',\n            },\n          },\n          DEC: {\n            actions: {\n              type: 'decrement',\n            },\n            guard: {\n              type: 'isNotMin',\n            },\n          },\n          TOGGLE: {\n            target: states.disabled,\n          },\n        },\n      },\n      disabled: {\n        on: {\n          TOGGLE: {\n            target: states.enabled,\n          },\n        },\n      },\n    },\n  },\n  {\n    actions: {\n      increment: assign(increment),\n      decrement: assign(decrement),\n    },\n    guards: {\n      isNotMax,\n      isNotMin,\n    },\n  },\n);\n```\n\n***xstate-counter.js***\n\n```javascript\nimport { html, LitElement } from 'lit';\nimport { BlockquoteControllerXstate } from '@blockquote-web-components/blockquote-controller-xstate';\nimport { counterMachine } from './counterMachine.js';\n\nexport class XstateCounter extends LitElement {\n  static properties = {\n    _xstate: {\n      type: Object,\n      state: true,\n    },\n  };\n\n  constructor() {\n    super();\n    this._xstate = {};\n    this.counterController = new BlockquoteControllerXstate(this, counterMachine, '_xstate');\n  }\n\n  updated(props) {\n    super.updated && super.updated(props);\n    if (props.has('_xstate')) {\n      const { context, value } = this._xstate;\n      const counterEvent = new CustomEvent('counterchange', {\n        bubbles: true,\n        detail: { ...context, value },\n      });\n      this.dispatchEvent(counterEvent);\n    }\n  }\n\n  // ...\n\n  get #disabled() {\n    return this.counterController.state.matches('disabled');\n  }\n\n  render() {\n    return html`\n      <button\n        ?disabled=\"${this.#disabled}\"\n        data-counter=\"increment\"\n        \\@click=${() => this.counterController.send({ type: 'INC' })}\n      >\n        Increment\n      </button>\n      <button\n        ?disabled=\"${this.#disabled}\"\n        data-counter=\"decrement\"\n        \\@click=${() => this.counterController.send({ type: 'DEC' })}\n      >\n        Decrement\n      </button>\n    `;\n  }\n\n  // ...\n}\n```\n<hr>",
          "name": "BlockquoteControllerXstate",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "send",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "EventObject"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "field",
              "name": "service"
            },
            {
              "kind": "field",
              "name": "propKey",
              "default": "propKey"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerXstate",
          "declaration": {
            "name": "BlockquoteControllerXstate",
            "module": "src/BlockquoteControllerXstate.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerXstate",
          "declaration": {
            "name": "BlockquoteControllerXstate",
            "module": "./src/BlockquoteControllerXstate.js"
          }
        }
      ]
    }
  ]
}
