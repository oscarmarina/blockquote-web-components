{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/BaseContextMetaElement.js",
      "declarations": [
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n`BaseContextMetaElement` emulates the behavior of a flow element using ARIA, preserving standard HTML functionality while enhancing its features.\n\n## Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/flow-element)\n\n## Features\n- Acts as a structural element that follows HTML flow content rules.\n- Provides a default ARIA role (`none`) to avoid unintended semantics.\n- Can be used as a wrapper for contextual metadata.\n\n## Accessibility\nBy default, `BaseContextMetaElement` [assigns the role=\"none\"](https://github.com/w3c/aria/pull/2383),\nensuring that it does not introduce unintended semantics in assistive technologies.\nThis behavior can be overridden by explicitly setting a different role.\n\n**Related:** [ARIA Structural Roles](https://www.w3.org/WAI/ARIA/apg/practices/structural-roles/#allstructuralrolesandtheirhtmlequivalents)\n\n> Inspired by the discussion: [Is it possible to make normal DOM elements context providers?](https://github.com/lit/lit/discussions/4690)\n**See Also:** [contextmeta provider directive](https://github.com/oscarmarina/blockquote-web-components/tree/main/packages/controllers/blockquote-controller-context-meta/src/directives/context-meta-provider.js)\n\nWith this setup, `BaseContextMetaElement` behaves like a [flow element](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#flow_content).\n\n\n<hr>",
          "name": "BaseContextMetaElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "base-context-meta",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseContextMetaElement",
          "declaration": {
            "name": "BaseContextMetaElement",
            "module": "src/BaseContextMetaElement.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "base-context-meta",
          "declaration": {
            "name": "BaseContextMetaElement",
            "module": "src/BaseContextMetaElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/BlockquoteControllerContextMeta.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "contextMetaSymbol"
        },
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n`BlockquoteControllerContextMeta` is a Lit Reactive Controller that encapsulates the controllers provided by [@lit/context](https://lit.dev/docs/data/context/)\n\n**Features:**\n- Allows a component to act simultaneously as a provider and a consumer.\n- Delays consumer initialization until after the first update, minimizing the risk of a consumer in the Light DOM requesting a context before a provider is available.\n<hr>\n\n### Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/blockquote-web-components/tree/main/packages/controllers/blockquote-controller-context-meta)\n\n### Usage\n- [Lit examples context-basics](https://lit.dev/playground/#sample=examples/context-basics)\n```js\n\nimport { html, LitElement, css } from 'lit';\nimport { BlockquoteControllerContextMeta } from '@blockquote-web-components/blockquote-controller-context-meta';\n\nexport class ProviderEl extends LitElement {\n  static styles = css`\n    slot {\n      display: block;\n      border: dashed 4px grey;\n      padding: 10px;\n    }\n\n    :host {\n      display: block;\n      border: solid 4px gainsboro;\n      padding: 2px;\n    }\n\n    h3 {\n      margin-top: 0;\n    }\n  `;\n\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this._provider = new BlockquoteControllerContextMeta(this, {\n      context: Symbol.for('contextKey')\n    });\n\n    this.data = 'Initial';\n  }\n\n   // `data` will be provided to any consumer that is in the DOM tree below it.\n  set data(value) {\n    this._data = value;\n    this._provider.setValue(value);\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  render() {\n    return html`\n      <h3>Provider's data: <code>${this.data}</code></h3>\n      <slot></slot>\n    `;\n  }\n}\ncustomElements.define('provider-el', ProviderEl);\n\nexport class ConsumerEl extends LitElement {\n  _consumer = new BlockquoteControllerContextMeta(this, {\n    context: Symbol.for('contextKey')\n    callback: (v) => {\n      this.setAttribute('data-callback', v);\n    },\n  });\n\n\n  // `providedData` will be populated by the first ancestor element which\n  // provides a value for `context`.\n\n  get providedData() {\n    return this._consumer.value;\n  }\n\n  render() {\n    return html`<h3>Consumer data: <code>${this.providedData}</code></h3>\n      <hr />\n      <slot></slot>`;\n  }\n}\ncustomElements.define('consumer-el', ConsumerEl);\n```\n\n <hr>",
          "name": "ContextMeta",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "v"
                },
                {
                  "name": "force",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "context"
            },
            {
              "kind": "field",
              "name": "initialValue",
              "default": "initialValue"
            },
            {
              "kind": "field",
              "name": "callback",
              "default": "callback"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "contextMetaSymbol",
          "declaration": {
            "name": "contextMetaSymbol",
            "module": "src/BlockquoteControllerContextMeta.js"
          }
        },
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "ContextMeta",
            "module": "src/BlockquoteControllerContextMeta.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "BlockquoteControllerContextMeta",
            "module": "./BlockquoteControllerContextMeta.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseContextMetaElement",
          "declaration": {
            "name": "BaseContextMetaElement",
            "module": "./BaseContextMetaElement.js"
          }
        },
        {
          "kind": "js",
          "name": "contextMetaProvider",
          "declaration": {
            "name": "contextMetaProvider",
            "module": "./directives/context-meta-provider.js"
          }
        },
        {
          "kind": "js",
          "name": "cacheContextMetaProvider",
          "declaration": {
            "name": "cacheContextMetaProvider",
            "module": "./directives/cache-context-meta-provider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/cache-context-meta-provider.js",
      "declarations": [
        {
          "kind": "function",
          "name": "cacheContextMetaProvider",
          "parameters": [
            {
              "name": "element",
              "description": "element",
              "type": {
                "text": "HTMLElement|*"
              }
            },
            {
              "name": "{context = contextMetaSymbol, initialValue}"
            },
            {
              "description": "options for the context provider.",
              "name": "arg",
              "type": {
                "text": "{\n *   context?: *,\n *   initialValue?: ContextType<*>,\n * }"
              }
            }
          ],
          "description": "Return or create a cached BlockquoteControllerContextMeta for (element, context).\n\nThis function memoizes BlockquoteControllerContextMeta instances per (element, contextKey).\nIf a BlockquoteControllerContextMeta already exists for the given element and context, it is\nreturned; otherwise a new BlockquoteControllerContextMeta is created, cached and returned."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cacheContextMetaProvider",
          "declaration": {
            "name": "cacheContextMetaProvider",
            "module": "src/directives/cache-context-meta-provider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/context-meta-provider.js",
      "declarations": [
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n`contextMetaProviderDirective` is a Lit directive that enables normal DOM elements to act as context providers.\nYou can use this directive in both attribute and element bindings in Lit templates.\n\n> https://github.com/lit/lit/discussions/4690\n\nUsage:\nThis directive transforms a DOM element into a Lit context provider using the BlockquoteControllerContextMeta class, a\nLit Reactive Controller that encapsulates controllers provided by [@lit/context](https://lit.dev/docs/data/context/).\n\n## Features\n- Enables non-Lit elements to provide context.\n- Works seamlessly with [`@lit/context`](https://lit.dev/docs/data/context/).\n- Utilizes `BlockquoteControllerContextMeta`, a Lit Reactive Controller for managing context.\n\n```js\n  <div ${contextMetaProviderDirective(someValue, myContext)}>\n    <!-- Children can consume the provided context -->\n  </div>\n  //\n  <div data-info=\"${contextMetaProviderDirective(someValue, myContext)}\">\n    <!-- Children can consume the provided context -->\n  </div>\n```",
          "name": "README",
          "superclass": {
            "name": "Text",
            "module": "src/directives/context-meta-provider.js"
          }
        },
        {
          "kind": "variable",
          "name": "contextMetaProvider"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "README",
          "declaration": {
            "name": "README",
            "module": "src/directives/context-meta-provider.js"
          }
        },
        {
          "kind": "js",
          "name": "contextMetaProvider",
          "declaration": {
            "name": "contextMetaProvider",
            "module": "src/directives/context-meta-provider.js"
          }
        }
      ]
    }
  ]
}
