{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/BaseContextMetaElement.js",
      "declarations": [
        {
          "kind": "class",
          "description": "`BaseContextMetaElement` leverages Lit's features and Context API capabilities to facilitate the creation of a component that can be used in place of a standard element, such as a `div`, thus simplifying the use of contexts.\n> [Is it possible to make normal dom elements context providers?](https://github.com/lit/lit/discussions/4690)\n\n### Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/flow-element)\n\n### Features\nIt incorporates functionality to handle context consumption and presentation as a standard block element.\n\n1. The `:host` CSS rules ensure the element behaves like a block-level element and respects the `hidden` attribute to hide itself.\n   ```js\n   static styles = [\n     css`\n       :host {\n         display: block;\n       }\n       :host([hidden]),\n       [hidden] {\n         display: none !important;\n       }\n     `,\n   ];\n   ```\n\n2. The setConsumerContext method allows setting up a context consumer on the element. It creates a new BlockquoteControllerContextMeta if one does not already exist.\n   ```js\n   setConsumerContext(cc = symbolContextMeta) {\n     if (!this.controllerBaseContextMeta) {\n       this.controllerBaseContextMeta = new BlockquoteControllerContextMeta(this, {\n         context: cc,\n       });\n     }\n   }\n   ```\n\n3. Set a default role of 'presentation' to ensure it behaves semantically like a non-interactive container.\n   ```js\n   connectedCallback() {\n     super.connectedCallback?.();\n     Object.assign(this, this.role ? {} : { role: 'presentation' });\n   }\n   ```\n\n4. The render method includes a <slot>, which allows this element to be a flexible container for any child content, mimicking the behavior of a [flow element](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#flow_content).\n   ```js\n   render() {\n     return html`<slot></slot>`;\n   }\n   ```\n\n\n### Usage Example: FlownElement\nTo demonstrate the utility of BaseContextMetaElement, let's create a derived class called FlownElement:\n\n1. Define Properties: The surface property is declared with reflection, allowing it to influence rendering and context behavior dynamically.\n  ```js\n  static properties = {\n    surface: { reflect: true },\n  };\n  ```\n\n2. Set Context on Construction: The constructor calls setConsumerContext with a specific context, enabling the element to participate in the context API from its inception.\n  ```js\n  constructor() {\n    super();\n    this.surface = undefined;\n    this.setConsumerContext(consumerContext);\n  }\n  ```\n\n3. Update Context Values: The willUpdate lifecycle method updates the context value whenever the surface property changes, ensuring context-sensitive operations react appropriately.\n  ```js\n  willUpdate(props) {\n    super.willUpdate?.(props);\n    if (props.has('surface')) {\n      this.controllerBaseContextMeta?.setValue(this.surface);\n    }\n  }\n  ```\n\n> __Important__: When extending BaseContextMetaElement, it is essential to use this.controllerBaseContextMeta.\n\n### Usage Example:\nHere's how you might use the FlownElement in your HTML:\n\n```html\n<flow-element surface=\"dim\">\n  <!-- Child content that can consume context from this provider -->\n</flow-element>\n```\n\nWith this setup, FlownElement behaves like a [flow element](https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#flow_content) but provides the additional benefit of context management via Lit's context API, allowing you to seamlessly integrate context-sensitive behavior without altering the parent element hierarchy.",
          "name": "BaseContextMetaElement",
          "members": [
            {
              "kind": "method",
              "name": "setConsumerContext",
              "parameters": [
                {
                  "name": "cc",
                  "default": "contextMetaSymbol",
                  "description": "context name.",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Initializes the context consumer controller if not already present."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseContextMetaElement",
          "declaration": {
            "name": "BaseContextMetaElement",
            "module": "src/BaseContextMetaElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/BlockquoteControllerContextMeta.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "contextMetaSymbol",
          "type": {
            "text": "string"
          },
          "default": "'context-meta-symbol'"
        },
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n`BlockquoteControllerContextMeta` is a Lit Reactive Controller that encapsulates the controllers provided by",
          "name": "ContextMeta",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "v"
                },
                {
                  "name": "force",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "context"
            },
            {
              "kind": "field",
              "name": "initialValue",
              "default": "initialValue"
            },
            {
              "kind": "field",
              "name": "callback",
              "default": "callback"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_contextMetaProvider",
              "default": "new ContextProvider(this.host, { context: this.context, initialValue: this.initialValue, })"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "contextMetaSymbol",
          "declaration": {
            "name": "contextMetaSymbol",
            "module": "src/BlockquoteControllerContextMeta.js"
          }
        },
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "ContextMeta",
            "module": "src/BlockquoteControllerContextMeta.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "BlockquoteControllerContextMeta",
            "module": "./BlockquoteControllerContextMeta.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseContextMetaElement",
          "declaration": {
            "name": "BaseContextMetaElement",
            "module": "./BaseContextMetaElement.js"
          }
        }
      ]
    }
  ]
}
