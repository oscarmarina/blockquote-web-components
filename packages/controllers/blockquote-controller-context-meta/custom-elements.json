{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/BlockquoteControllerContextMeta.js",
      "declarations": [
        {
          "kind": "class",
          "description": "![Lit](https://img.shields.io/badge/lit-3.0.0-blue.svg)\n\n`BlockquoteControllerContextMeta` is a Lit Reactive Controller that encapsulates the controllers provided by @lit/context.\n\n**Features:**\n- It enables a component to serve as both a provider and a consumer.\n- It places the consumer after the first update to reduce the chance of a consumer in LightDOM requesting a context that currently lacks a provider.\n- Create a context object using a global symbol (Symbol.for('my-context')).\n\n<hr>\n\n### Demo\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/oscarmarina/blockquote-web-components/tree/main/packages/controllers/blockquote-controller-context-meta)\n\n### Usage\n- [Lit examples context-basics](https://lit.dev/playground/#sample=examples/context-basics)\n```js\n\nimport { html, LitElement, css } from 'lit';\nimport { BlockquoteControllerContextMeta } from '@blockquote-web-components/blockquote-controller-context-meta';\n\nexport class ProviderEl extends LitElement {\n  static styles = css`\n    slot {\n      display: block;\n      border: dashed 4px grey;\n      padding: 0px 10px;\n    }\n\n    :host {\n      display: block;\n      border: solid 4px gainsboro;\n      padding: 2px;\n    }\n\n    h3 {\n      margin-top: 0;\n    }\n  `;\n\n  static properties = {\n    data: {},\n  };\n\n  constructor() {\n    super();\n    this._provider = new BlockquoteControllerContextMeta(this, {\n      context: 'contextKey', // String used as key in Symbol.for when creating context with createContext(Symbol.for(context))\n    });\n\n    this.data = 'Initial';\n  }\n\n   // `data` will be provided to any consumer that is in the DOM tree below it.\n  set data(value) {\n    this._data = value;\n    this._provider.setValue(value);\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  render() {\n    return html`\n      <h3>Provider's data: <code>${this.data}</code></h3>\n      <slot></slot>\n    `;\n  }\n}\ncustomElements.define('provider-el', ProviderEl);\n\nexport class ConsumerEl extends LitElement {\n  _consumer = new BlockquoteControllerContextMeta(this, {\n    context: 'contextKey', // String used as key in Symbol.for when creating context with createContext(Symbol.for(context))\n    callback: (v) => {\n      this.setAttribute('data-callback', v);\n    },\n  });\n\n\n  // `providedData` will be populated by the first ancestor element which\n  // provides a value for `context`.\n\n  get providedData() {\n    return this._consumer.value;\n  }\n\n  render() {\n    return html`<h3>Consumer data: <code>${this.providedData}</code></h3>\n      <hr />\n      <slot></slot>`;\n  }\n}\ncustomElements.define('consumer-el', ConsumerEl);\n```\n\n <hr>",
          "name": "ContextMeta",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "v"
                },
                {
                  "name": "force",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "context"
            },
            {
              "kind": "field",
              "name": "initialValue",
              "default": "initialValue"
            },
            {
              "kind": "field",
              "name": "callback",
              "default": "callback"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_contextMetaProvider",
              "default": "new ContextProvider(this.host, {\n      context: this.context,\n      initialValue: this.initialValue,\n    })"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "ContextMeta",
            "module": "src/BlockquoteControllerContextMeta.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "BlockquoteControllerContextMeta",
          "declaration": {
            "name": "BlockquoteControllerContextMeta",
            "module": "./BlockquoteControllerContextMeta.js"
          }
        }
      ]
    }
  ]
}
